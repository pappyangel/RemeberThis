<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="XClose">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @Body
            </div>
            <div class="modal-footer">
                @Footer
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public RenderFragment? Title { get; set; } = null!;

    [Parameter]
    public RenderFragment? Body { get; set; } = null!;

    [Parameter]
    public RenderFragment? Footer { get; set; } = null!;

  

    [Parameter]
    public EventCallback<string> SendBtnClickedBackToParent { get; set; }



    private string modalDisplay = "none;";
    private string modalClass = "";
    private bool showBackdrop = false;

    public void Open()
    {
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;

    }
    private async Task  XClose()
    {
        await SendModalButtonClicked("XClose");
    }

    public async Task SendModalButtonClicked(string BtnName)
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
        
        // HasDelegate appears to be a best practice so you don't invoke a callback if a call back listener (delegate) has not been set up.
        if (SendBtnClickedBackToParent.HasDelegate)
        {
            await SendBtnClickedBackToParent.InvokeAsync(BtnName);
        }       

    }
}