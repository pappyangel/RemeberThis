@page "/NewModalPopOverParent"
@inject IJSRuntime JS


<h1>Slick Method calling child and getting callback!</h1>

<button class="btn btn-primary" @onclick="() => childmodal.Open()">Call child Modal</button>

<NewModalChild @ref="childmodal" SendBtnClickedBackToParent="DisplayBtnClicked">
    <Title> <em>Test Harnes to tet myModal</em></Title>

    <Body>
        <p>
            This is paragraph text
            <i>This is inside the i</i>
            <mark>This is inside the mark</mark>
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal"
            @onclick="() => childmodal.SendModalButtonClicked(btnClose)">
            <span class="oi oi-cloud" aria-hidden="true"></span> Close
        </button>

        <button type="button" class="btn btn-lg btn-secondary"
            @* @onclick='() => childmodal.SendModalButtonClicked("Secondary")' *@
            data-bs-toggle="popover" data-bs-title="Popover title" data-bs-content="This button doesn't do anything, but you can keep clicking me!"                                                                            >
            Click to see Popover2
        </button>

    </Footer>
</NewModalChild>

<br>
<br>
<br>
<br>
<p>You clicked this button: @btnClicked</p>


@code {
    private NewModalChild childmodal { get; set; }
    private string btnClicked = "Initial";
    private string btnClose = "Close";

    private void DisplayBtnClicked(string _btnClicked)
    {
        btnClicked = _btnClicked;

    }

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("enablePopovers");
        }
    }

}


